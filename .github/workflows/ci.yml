name: ci

on:
  release:
    types: [published]
  push:
    tags:
    branches:
      - main

env: 
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  build-test: 
    runs-on: ${{ matrix.os }}
    strategy: 
      fail-fast: false
      matrix: # { win + [clang,msvc], unix + [clang,gcc], macos + [clang] }
        os: 
          - windows-2022
          - windows-2019
          - ubuntu-20.04
          - macos-11
        compiler:
          - llvm-14.0.0
          - gcc-11
        generator:
          - Ninja
        include:
          - compiler: gcc-11
            gcov_exe: gcov
          - compiler: llvm-14.0.0
            gcov_exe: "llvm-cov gcov"
          - os: windows-2022
            compiler: msvc
            generator: 'Visual Studio 17 2022'
          - os: windows-2019
            compiler: msvc
            generator: 'Visual Studio 16 2019'
        exclude:
          - os: windows-2022
            compiler: gcc-11
            generator: Ninja
          - os: windows-2019
            compiler: gcc-11
            generator: Ninja
          - os: macos-11
            compiler: gcc-11
            generator: Ninja

    steps:
      - uses: actions/checkout@v3

      - name: "Cache setup"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ${{ env.CONAN_USER_HOME }}
          key: ${{matrix.os}}-${{matrix.compiler}}-${{matrix.generator}}-${{hashFiles('./conanfile.txt')}}-${{hashFiles('**/CMakeLists.txt')}}
          restore-keys: ${{matrix.os}}-${{matrix.compiler}}-${{matrix.generator}}-${{hashFiles('./conanfile.txt')}}

      - name: Setup cpp compiler and tools
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: true
          ninja: true
          conan: true 
          clangtidy: true
          ccache: true
          gcovr: true
          opencppcoverage: true

      - name: Cleanup Conan system packages (they are not properly cached)
        run: conan remove -f '*/system'

      - name: configure project
        run: |
          cmake -S . -B ./build -G "${{ matrix.generator }}" -DGIT_SHA:STRING=${{github.sha}} -DCMAKE_BUILD_TYPE=Debug -DENABLE_TESTS=ON
     
      - name: build project
        run: cmake --build ./build

      - name: run CTest and coverage (Unix)
        if: runner.os != 'Windows'
        working-directory: ./build
        run: |
          ctest --verbose
          gcovr --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_exe }}'

      - name: run CTest and coverage (Windows)
        if: runner.os == 'Windows'
        working-directory: ./build
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C Debug --verbose

      - name: configure Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: build
          files: coverage.xml
          name: codecov-umbrella
          verbose: true

      - name: configure release
        if: startsWith(github.ref, 'refs/tags') 
        run: cmake -S . -B ./build -G "${{ matrix.generator }}" -DGIT_SHA:STRING=${{github.sha}} -DCMAKE_BUILD_TYPE=Release

      - name: build project release
        if: startsWith(github.ref, 'refs/tags')
        run: cmake --build ./build
      
      - name: cpack project
        if: startsWith(github.ref, 'refs/tags')
        working-directory: ./build
        run: cpack -C CPackConfig.cmake -G ZIP

      - name: publish release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          files: ./build/*

